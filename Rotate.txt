이미지 회전 함수로 plgblt를 사용했습니다.
 plgblt가 좀 무거운애라.. 500개 이상 뿌리고 이러시는거면 비추합니다.

 plgblt는 점 3개(leftTop, rightTop, leftBottom) 찍고 그 점에 맞춰 그려주는 함수입니다. 리사이즈도 가능.
 
 먼저 이닛부분에 _rotateImage를 추가해주셔야 합니다. 기본 _imageInfo와 만드는 방식은 비슷합니다.
   if (_rotate)
   {
      int size;
      (width > height ? size = width : size = height);
      _rotateImage = new IMAGE_INFO;
      _rotateImage->loadType = LOAD_EMPTY;
      _rotateImage->resID = 0;
      _rotateImage->hMemDC = CreateCompatibleDC(hdc);
      _rotateImage->hBit = (HBITMAP)CreateCompatibleBitmap(hdc, size, size);
      _rotateImage->hOBit = (HBITMAP)SelectObject(_rotateImage->hMemDC, _rotateImage->hBit);
      _rotateImage->width = size;
      _rotateImage->height = size;
   }

 
===============================================================================
 1. RoateRender 
 

void image::RotateRender(HDC hdc, float centerX, float centerY, float angle)
{
   POINT rPoint[3];
   int dist = sqrt((_imageInfo->width / 2)*(_imageInfo->width / 2) + (_imageInfo->height / 2)*(_imageInfo->height / 2));
   float baseAngle[3];
   baseAngle[0] = PI - atanf(((float)_imageInfo->height / 2) / ((float)_imageInfo->width / 2));
   baseAngle[1] = atanf(((float)_imageInfo->height / 2) / ((float)_imageInfo->width / 2));
   baseAngle[2] = PI + atanf(((float)_imageInfo->height / 2) / ((float)_imageInfo->width / 2));

   for (int i = 0; i < 3; i++)
   {
      rPoint[i].x = (_rotateImage->width / 2 + cosf(baseAngle[i] + angle)*dist);
      rPoint[i].y = (_rotateImage->height / 2 + -sinf(baseAngle[i] + angle)*dist);
   }

   if (_trans)
   {
      // 검은 색으로 채운다
      BitBlt(_rotateImage->hMemDC, 0, 0,
         _rotateImage->width, _rotateImage->height,
         hdc,
         0, 0, BLACKNESS);

      // 검은색과 1,1 점이 같으면 현재 브러쉬색(transColor)으로 채운다
      HBRUSH hBrush = CreateSolidBrush(_transColor);
      HBRUSH oBrush = (HBRUSH)SelectObject(_rotateImage->hMemDC, hBrush);
      ExtFloodFill(_rotateImage->hMemDC, 1, 1, RGB(0, 0, 0), FLOODFILLSURFACE);
      DeleteObject(hBrush);


      PlgBlt(_rotateImage->hMemDC, rPoint, _imageInfo->hMemDC,
         0,
         0,
         _imageInfo->width,
         _imageInfo->height,
         NULL, 0, 0);
      GdiTransparentBlt(hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2,
         _rotateImage->width,
         _rotateImage->height,
         _rotateImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _transColor);

   }
   else
   {
      PlgBlt(hdc, rPoint, _imageInfo->hMemDC, 0, 0, _imageInfo->width, _imageInfo->height, NULL, 0, 0);
   }
}


--------------------------------------------------------------------------------------
 2. RotateRender - Alpha
 

void image::RotateRender(HDC hdc, float centerX, float centerY, float angle, BYTE alpha)
{
   _blendFunc.SourceConstantAlpha = alpha;

   POINT rPoint[3];
   int dist = sqrt((_imageInfo->width / 2)*(_imageInfo->width / 2) + (_imageInfo->height / 2)*(_imageInfo->height / 2));
   float baseAngle[3];
   baseAngle[0] = PI - atanf(((float)_imageInfo->height / 2) / ((float)_imageInfo->width / 2));
   baseAngle[1] = atanf(((float)_imageInfo->height / 2) / ((float)_imageInfo->width / 2));
   baseAngle[2] = PI + atanf(((float)_imageInfo->height / 2) / ((float)_imageInfo->width / 2));

   for (int i = 0; i < 3; i++)
   {
      rPoint[i].x = (_rotateImage->width / 2 + cosf(baseAngle[i] + angle)*dist);
      rPoint[i].y = (_rotateImage->height / 2 + -sinf(baseAngle[i] + angle)*dist);
   }

   if (_trans)
   {
      // 검은 색으로 채운다
      BitBlt(_rotateImage->hMemDC, 0, 0,
         _rotateImage->width, _rotateImage->height,
         hdc,
         0, 0, BLACKNESS);
      BitBlt(_blendImage->hMemDC, 0, 0,
         _rotateImage->width, _rotateImage->height,
         hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2, SRCCOPY);

      // 검은색과 1,1 점이 같으면 현재 브러쉬색(transColor)으로 채운다
      HBRUSH hBrush = CreateSolidBrush(_transColor);
      HBRUSH oBrush = (HBRUSH)SelectObject(_rotateImage->hMemDC, hBrush);
      ExtFloodFill(_rotateImage->hMemDC, 1, 1, RGB(0, 0, 0), FLOODFILLSURFACE);
      DeleteObject(hBrush);


      PlgBlt(_rotateImage->hMemDC, rPoint, _imageInfo->hMemDC,
         0,
         0,
         _imageInfo->width,
         _imageInfo->height,
         NULL, 0, 0);
      GdiTransparentBlt(_blendImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _rotateImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _transColor);
         
      AlphaBlend(hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2,
         _rotateImage->width,
         _rotateImage->height,
         _blendImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height, _blendFunc);

   }
   else
   {
      PlgBlt(hdc, rPoint, _imageInfo->hMemDC, 0, 0, _imageInfo->width, _imageInfo->height, NULL, 0, 0);
   }
}
 

--------------------------------------------------------------------------------------
 3. FrameRotateRender

void image::FrameRotateRender(HDC hdc, float centerX, float centerY, float angle)
{
   POINT rPoint[3];
   int dist = sqrt((_imageInfo->frameWidth / 2)*(_imageInfo->frameWidth / 2) + (_imageInfo->frameHeight / 2)*(_imageInfo->frameHeight / 2));
   float baseAngle[3];
   baseAngle[0] = PI - atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[1] = atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[2] = PI + atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));


   for (int i = 0; i < 3; i++)
   {
      rPoint[i].x = (_rotateImage->width / 2 + cosf(baseAngle[i] + angle)*dist);
      rPoint[i].y = (_rotateImage->height / 2 + -sinf(baseAngle[i] + angle)*dist);
   }
   if (_trans)
   {

      // 검은 색으로 채운다
      BitBlt(_rotateImage->hMemDC, 0, 0,
         _rotateImage->frameWidth, _rotateImage->frameHeight,
         hdc,
         0, 0, BLACKNESS);

      // 검은색과 1,1 점이 같으면 현재 브러쉬색(transColor)으로 채운다
      HBRUSH hBrush = CreateSolidBrush(_transColor);
      HBRUSH oBrush = (HBRUSH)SelectObject(_rotateImage->hMemDC, hBrush);
      ExtFloodFill(_rotateImage->hMemDC, 1, 1, RGB(0, 0, 0), FLOODFILLSURFACE);
      DeleteObject(hBrush);


      PlgBlt(_rotateImage->hMemDC, rPoint, _imageInfo->hMemDC,
         _imageInfo->currentFrameX * _imageInfo->frameWidth,
         _imageInfo->currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth,
         _imageInfo->frameHeight,
         NULL, 0, 0);
      GdiTransparentBlt(hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2,
         _rotateImage->width,
         _rotateImage->height,
         _rotateImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _transColor);

   
   }
   else
   {
      PlgBlt(hdc, rPoint, _imageInfo->hMemDC,
         _imageInfo->currentFrameX * _imageInfo->frameWidth,
         _imageInfo->currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth, _imageInfo->frameHeight, NULL, 0, 0);
   }
}


void image::FrameRotateRender(HDC hdc, float centerX, float centerY, int currentFrameX, int currentFrameY, float angle)
{
   POINT rPoint[3];
   int dist = sqrt((_imageInfo->frameWidth / 2)*(_imageInfo->frameWidth / 2) + (_imageInfo->frameHeight / 2)*(_imageInfo->frameHeight / 2));
   float baseAngle[3];
   baseAngle[0] = PI - atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[1] = atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[2] = PI + atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));

   
   for (int i = 0; i < 3; i++)
   {
      rPoint[i].x = (_rotateImage->width / 2 + cosf(baseAngle[i] + angle)*dist);
      rPoint[i].y = (_rotateImage->height / 2 + -sinf(baseAngle[i] + angle)*dist);
   }
   if (_trans)
   {
      // 검은 색으로 채운다
      BitBlt(_rotateImage->hMemDC, 0, 0,
         _rotateImage->frameWidth, _rotateImage->frameHeight,
         hdc,
         0,0, BLACKNESS);

      // 검은색과 1,1 점이 같으면 현재 브러쉬색(transColor)으로 채운다
      HBRUSH hBrush = CreateSolidBrush(_transColor);
      HBRUSH oBrush = (HBRUSH)SelectObject(_rotateImage->hMemDC, hBrush);
      ExtFloodFill(_rotateImage->hMemDC, 1, 1, RGB(0,0,0), FLOODFILLSURFACE);
      DeleteObject(hBrush);

      
      PlgBlt(_rotateImage->hMemDC, rPoint, _imageInfo->hMemDC,
         currentFrameX * _imageInfo->frameWidth,
         currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth,
         _imageInfo->frameHeight,
         NULL, 0, 0);
      GdiTransparentBlt(hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2,
         _rotateImage->width,
         _rotateImage->height,
         _rotateImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _transColor);

   }
   else
   {
      PlgBlt(hdc, rPoint, _imageInfo->hMemDC,
         currentFrameX * _imageInfo->frameWidth,
         currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth, _imageInfo->frameHeight, NULL, 0, 0);
   }
}


--------------------------------------------------------------------------------------
 4. FrameRotateRender / Alpha

void image::FrameRotateRender(HDC hdc, float centerX, float centerY, float angle, BYTE alpha)
{
   _blendFunc.SourceConstantAlpha = alpha;

   POINT rPoint[3];
   int dist = sqrt((_imageInfo->frameWidth / 2)*(_imageInfo->frameWidth / 2) + (_imageInfo->frameHeight / 2)*(_imageInfo->frameHeight / 2));
   float baseAngle[3];
   baseAngle[0] = PI - atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[1] = atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[2] = PI + atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));


   for (int i = 0; i < 3; i++)
   {
      rPoint[i].x = (_rotateImage->width / 2 + cosf(baseAngle[i] + angle)*dist);
      rPoint[i].y = (_rotateImage->height / 2 + -sinf(baseAngle[i] + angle)*dist);
   }
   if (_trans)
   {

      // 검은 색으로 채운다
      BitBlt(_rotateImage->hMemDC, 0, 0,
         _rotateImage->width, _rotateImage->height,
         hdc,
         0, 0, BLACKNESS);
      BitBlt(_blendImage->hMemDC, 0, 0,
         _rotateImage->width, _rotateImage->height,
         hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2, SRCCOPY);

      // 검은색과 1,1 점이 같으면 현재 브러쉬색(transColor)으로 채운다
      HBRUSH hBrush = CreateSolidBrush(_transColor);
      HBRUSH oBrush = (HBRUSH)SelectObject(_rotateImage->hMemDC, hBrush);
      ExtFloodFill(_rotateImage->hMemDC, 1, 1, RGB(0, 0, 0), FLOODFILLSURFACE);
      DeleteObject(hBrush);


      PlgBlt(_rotateImage->hMemDC, rPoint, _imageInfo->hMemDC,
         _imageInfo->currentFrameX * _imageInfo->frameWidth,
         _imageInfo->currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth,
         _imageInfo->frameHeight,
         NULL, 0, 0);
      GdiTransparentBlt(_blendImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _rotateImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _transColor);
      AlphaBlend(hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2,
         _rotateImage->width,
         _rotateImage->height,
         _blendImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height, _blendFunc);

   }
   else
   {
      PlgBlt(hdc, rPoint, _imageInfo->hMemDC,
         _imageInfo->currentFrameX * _imageInfo->frameWidth,
         _imageInfo->currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth, _imageInfo->frameHeight, NULL, 0, 0);
   }
}

void image::FrameRotateRender(HDC hdc, float centerX, float centerY, int currentFrameX, int currentFrameY, float angle, BYTE alpha)
{
   _blendFunc.SourceConstantAlpha = alpha;

   POINT rPoint[3];
   int dist = sqrt((_imageInfo->frameWidth / 2)*(_imageInfo->frameWidth / 2) + (_imageInfo->frameHeight / 2)*(_imageInfo->frameHeight / 2));
   float baseAngle[3];
   baseAngle[0] = PI - atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[1] = atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));
   baseAngle[2] = PI + atanf(((float)_imageInfo->frameHeight / 2) / ((float)_imageInfo->frameWidth / 2));


   for (int i = 0; i < 3; i++)
   {
      rPoint[i].x = (_rotateImage->width / 2 + cosf(baseAngle[i] + angle)*dist);
      rPoint[i].y = (_rotateImage->height / 2 + -sinf(baseAngle[i] + angle)*dist);
   }
   if (_trans)
   {
      // 검은 색으로 채운다
      BitBlt(_rotateImage->hMemDC, 0, 0,
         _rotateImage->width, _rotateImage->height,
         hdc,
         0, 0, BLACKNESS);
      BitBlt(_blendImage->hMemDC, 0, 0,
         _rotateImage->width, _rotateImage->height,
         hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2, SRCCOPY);

      // 검은색과 1,1 점이 같으면 현재 브러쉬색(transColor)으로 채운다
      HBRUSH hBrush = CreateSolidBrush(_transColor);
      HBRUSH oBrush = (HBRUSH)SelectObject(_rotateImage->hMemDC, hBrush);
      ExtFloodFill(_rotateImage->hMemDC, 1, 1, RGB(0, 0, 0), FLOODFILLSURFACE);
      DeleteObject(hBrush);

      PlgBlt(_rotateImage->hMemDC, rPoint, _imageInfo->hMemDC,
         currentFrameX * _imageInfo->frameWidth,
         currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth,
         _imageInfo->frameHeight,
         NULL, 0, 0);
      GdiTransparentBlt(_blendImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _rotateImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height,
         _transColor);
      AlphaBlend(hdc,
         centerX - _rotateImage->width / 2,
         centerY - _rotateImage->height / 2,
         _rotateImage->width,
         _rotateImage->height,
         _blendImage->hMemDC,
         0,
         0,
         _rotateImage->width,
         _rotateImage->height, _blendFunc);


   }
   else
   {
      PlgBlt(hdc, rPoint, _imageInfo->hMemDC,
         currentFrameX * _imageInfo->frameWidth,
         currentFrameY * _imageInfo->frameHeight,
         _imageInfo->frameWidth, _imageInfo->frameHeight, NULL, 0, 0);
   }
}


--------------------------------------------------------------------------------------